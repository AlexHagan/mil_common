#!/usr/bin/python

from __future__ import division

import struct
import math

import numpy

import rospy
from std_msgs.msg import Header
from geometry_msgs.msg import Vector3, PointStamped, Point

from rawgps_common import gps, bitstream
from rawgps_common.msg import Measurements, Satellite
from skytraq_driver import protocol
from skytraq_driver.msg import Packet, PacketSet


rospy.init_node('skytraq_parser')

handlers = protocol.Handlers(rospy.get_param('~frame_id'), rospy.Publisher('gps', Measurements), rospy.Publisher('gps_pos', PointStamped))

import threading
l = threading.Lock()

last_persistent = set()
def got_persistent(packetset):
    global last_persistent
    with l:
        for packet in sorted(packetset.packets, key=lambda packet: packet.header.stamp):
            if (packet.id, packet.data) not in last_persistent:
                protocol.dispatch(packet.id, packet.data, handlers, stamp=packet.header.stamp)
        last_persistent = set([(packet.id, packet.data) for packet in packetset.packets])
rospy.Subscriber('skytraq_serial/persistent', PacketSet, got_persistent)

def got_ephemeral(packet):
    with l:
        protocol.dispatch(packet.id, packet.data, handlers, stamp=packet.header.stamp)
rospy.Subscriber('skytraq_serial/ephemeral', Packet, got_ephemeral)

rospy.spin()

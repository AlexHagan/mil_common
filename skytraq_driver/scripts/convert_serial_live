#!/usr/bin/python

from __future__ import division

import struct

import rospy
from std_msgs.msg import Header

from rawgps_common import gps
from skytraq_driver import protocol as skytraq_protocol
from skytraq_driver.msg import Packet, PacketSet, SerialPacket

class Node(object):
    def __init__(self):
        self.ephemeral_pub = rospy.Publisher('skytraq_serial/ephemeral', Packet)
        self.persistent_pub = rospy.Publisher('skytraq_serial/persistent', PacketSet, latch=True)
        self.persistent_data = {}
        self.sub = rospy.Subscriber('skytraq_serial', SerialPacket, self.got_packet)
    
    def got_packet(self, msg):
        stamp = msg.header.stamp
        payload = msg.payload
        
        if len(payload) == 0:
            print 'empty packet'
            return
        
        if ord(payload[0]) not in skytraq_protocol.message_names:
            print 'unknown message id', hex(ord(payload[0]))
            return
        message_name = skytraq_protocol.message_names[ord(payload[0])]
        
        ephemeral_messages = set([
            'meas_time',
            'raw_meas',
            'sv_ch_status',
            'rcv_state',
        ])
        def get_subframe_id(body):
            PRN, SFID, subframe_data = struct.unpack('>BB30s', body)
            if SFID == 4 or SFID == 5:
                subframe = gps.subframes[SFID](subframe_data)
                return PRN, SFID, subframe.data_id, subframe.sv_id
            else:
                return PRN, SFID
        persistent_messages = dict(
            software_version=lambda body: None,
            software_crc=lambda body: None,
            gps_almanac_data=lambda body: struct.unpack('>B', body[:1]),
            gps_ephemeris_data=lambda body: struct.unpack('>H', body[:2]),
            subframe=get_subframe_id,
        )
        ignore_messages = set([
            'ack',
            'nack',
        ])
        
        packet = Packet(
            header=Header(
                stamp=stamp,
            ),
            id=ord(payload[0]),
            data=payload[1:],
        )
        
        if message_name in ephemeral_messages:
            self.ephemeral_pub.publish(packet)
        elif message_name in persistent_messages:
            id_tuple = ord(payload[0]), persistent_messages[message_name](payload[1:])
            if id_tuple not in self.persistent_data or packet.data != self.persistent_data[id_tuple].data:
                self.persistent_data[id_tuple] = packet
                self.persistent_pub.publish(PacketSet(self.persistent_data.values()))
        elif message_name in ignore_messages:
            pass
        else:
            assert False

rospy.init_node('convert_serial_live')

Node()

rospy.spin()

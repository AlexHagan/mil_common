#!/usr/bin/python

from __future__ import division

import struct
import socket
import threading
import math
import time

import numpy

import rospy
from std_msgs.msg import Header
from geometry_msgs.msg import Vector3, PointStamped, Point

from rawgps_common import gps, bitstream
from rawgps_common.msg import Measurements, Satellite
from skytraq_driver import protocol
from skytraq_driver.msg import Packet, PacketSet


rospy.init_node('sdgps_driver')

def group(iterator, count):
    itr = iter(iterator)
    while True:
        yield tuple([itr.next() for i in range(count)])

def comm_thread():
    frame_id = rospy.get_param('~frame_id')
    gps_pub = gps.GPSPublisher(frame_id)
    
    s = None
    
    while True:
        b = ''
        while True:
            if s is None:
                time.sleep(1)
                try:
                    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                    s.connect(('127.0.0.1', 7200))
                except:
                    s = None; b = ''
                    continue
            try:
                c = s.recv(1)
            except:
                s = None; b = ''
                continue
            if not c:
                s = None; b = ''
                continue
            b += c
            if b[-1] == '\n':
                break
        assert b.endswith('\r\n')
        b = b.strip()
        
        x = b.split(' ')
        if x[0] == 'SATS':
            sat_data = x[1:-2]; assert len(sat_data) % 5 == 0
            t = x[-2:]
            sats = []
            for prn, cn0, doppler, phase, pseudorange in group(sat_data, 5):
                sats.append(dict(
                    prn=int(prn),
                    cn0=float(cn0),
                    pseudo_range=-float(pseudorange),
                    carrier_cycles=float(phase) / (2 * math.pi),
                    doppler_freq=float(doppler),
                ))
            tt = gps.Time(int(t[0]), int(t[1])*1e-12)
            gps_pub.handle_raw_measurements(rospy.Time.now(), tt, sats)
            
        elif x[0] == 'SUBFRAME':
            assert len(x[1:]) == 3
            prn = int(x[1])
            sfid = int(x[2])
            assert len(x[3]) == 240
            subframe_data = ''
            for i in xrange(240//8):
                subframe_data += chr(int(x[3][i*8:i*8+8], 2))
            
            gps_pub.handle_subframe(rospy.Time.now(), prn, subframe_data)
        else:
            assert False, x[0]
threading.Thread(target=comm_thread).run()

rospy.spin()

#!/usr/bin/python

from __future__ import division

import math

import numpy

import rospy
from sensor_msgs.msg import Imu, MagneticField, FluidPressure
from std_msgs.msg import Header
from geometry_msgs.msg import Vector3, PoseStamped, Pose, Point, Quaternion
from tf import transformations, TransformBroadcaster


rospy.init_node('fake_imu')

tf_br = TransformBroadcaster()
imu_pub = rospy.Publisher('/imu/data_raw', Imu, queue_size=0)
press_pub = rospy.Publisher('/imu/pressure', FluidPressure, queue_size=0)
mag_pub = rospy.Publisher('/imu/mag', MagneticField, queue_size=0)

G = numpy.array([0, 0, -9.80665])
mag_world = numpy.array([-2341.1e-9, 24138.5e-9, -40313.5e-9])
ground_air_pressure = 101234

t = rospy.Time.now()

angvel = numpy.array([0, 0, 0])

def rotvec_to_quat(rotvec):
    return transformations.quaternion_about_axis(numpy.linalg.norm(rotvec), rotvec)

orient = numpy.array([0, 0, 0, 1])

while not rospy.is_shutdown():
    dt = .01
    rospy.sleep(max(rospy.Duration(0), t - rospy.Time.now()))
    
    acc = numpy.array([0, 0, 0])
    
    angacc = 10*numpy.random.randn(3) - .5 * angvel
    angvel = angvel + dt * angacc
    angvel = numpy.array([0, 0, 0])
    orient = transformations.quaternion_multiply(rotvec_to_quat(dt * angvel), orient)
    
    body_from_world = transformations.quaternion_matrix(orient)[:3, :3].T
    imu_pub.publish(Imu(
        header=Header(
            stamp=t,
            frame_id="/imu",
        ),
        angular_velocity=Vector3(*body_from_world.dot(angvel) + 0.002*numpy.random.randn(3)),
        linear_acceleration=Vector3(*body_from_world.dot(acc - G) + 0.04*numpy.random.randn(3)),
    ))
    press_pub.publish(FluidPressure(
        header=Header(
            stamp=t,
            frame_id="/imu",
        ),
        fluid_pressure=ground_air_pressure + 10*numpy.random.randn(),
        variance=10**2,
    ))
    mag_pub.publish(MagneticField(
        header=Header(
            stamp=t,
            frame_id="/imu",
        ),
        magnetic_field=Vector3(*body_from_world.dot(mag_world) + 2e-7*numpy.random.randn(3)),
    ))
    tf_br.sendTransform([0, 0, 0], [0, 0, 0, 1], t, '/gps', '/imu')
    
    t += rospy.Duration(dt)
